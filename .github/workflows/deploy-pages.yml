# DISABLED: Using Cloudflare Pages for dashboard deployment
# This workflow is kept for reference but disabled
# Dashboard is deployed via Cloudflare Pages at: https://mcp-hub.pages.dev

name: Deploy GitHub Pages (DISABLED)

on:
  # Disabled - using Cloudflare Pages instead
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  actions: read

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build Dashboard
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: dashboard/package.json

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Install dependencies
        run: |
          cd dashboard
          npm ci

      - name: Run tests
        run: |
          cd dashboard
          npm test -- --run

      - name: Build dashboard
        run: |
          cd dashboard
          npm run build
        env:
          VITE_API_BASE_URL: https://mcp-hub-worker.${{ secrets.CLOUDFLARE_SUBDOMAIN }}.workers.dev

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dashboard/dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    name: Deploy to GitHub Pages
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Update deployment status
        if: success()
        run: |
          echo "‚úÖ Dashboard deployed successfully"
          echo "üîó Dashboard URL: ${{ steps.deployment.outputs.page_url }}"

  health-check:
    needs: deploy
    runs-on: ubuntu-latest
    name: Post-deployment Health Check
    
    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Health check dashboard
        run: |
          DASHBOARD_URL="${{ needs.deploy.outputs.page_url || format('https://{0}.github.io/mcp-hub', github.repository_owner) }}"
          
          echo "üîç Checking dashboard health at: $DASHBOARD_URL"
          
          # Check if dashboard is responding
          if curl -f -s "$DASHBOARD_URL" > /dev/null; then
            echo "‚úÖ Dashboard is accessible"
          else
            echo "‚ùå Dashboard health check failed"
            exit 1
          fi
          
          # Check if main assets are loading
          if curl -f -s "$DASHBOARD_URL/assets/" > /dev/null 2>&1 || curl -f -s "$DASHBOARD_URL" | grep -q "MCP Hub"; then
            echo "‚úÖ Dashboard assets are loading"
          else
            echo "‚ùå Dashboard assets check failed"
            exit 1
          fi
          
          echo "üéâ Dashboard health check passed!"

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Dashboard Deployment Failed',
              body: `
                ## Dashboard Deployment Failure
                
                The GitHub Pages deployment failed in workflow run: ${context.runId}
                
                **Branch:** ${context.ref}
                **Commit:** ${context.sha}
                **Workflow:** ${context.workflow}
                
                Please check the [workflow logs](${context.payload.repository.html_url}/actions/runs/${context.runId}) for more details.
                
                ---
                *This issue was automatically created by the deployment workflow.*
              `,
              labels: ['bug', 'deployment', 'dashboard']
            });

  lighthouse:
    needs: deploy
    runs-on: ubuntu-latest
    name: Lighthouse Performance Audit
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://${{ github.repository_owner }}.github.io/mcp-hub
            https://${{ github.repository_owner }}.github.io/mcp-hub/browse
          configPath: '.github/lighthouse/lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Comment PR with Lighthouse results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = '.lighthouseci';
            
            if (fs.existsSync(path)) {
              const results = fs.readdirSync(path)
                .filter(file => file.endsWith('.json'))
                .map(file => JSON.parse(fs.readFileSync(`${path}/${file}`, 'utf8')));
              
              if (results.length > 0) {
                const summary = results.map(result => {
                  const { lhr } = result;
                  const scores = {
                    performance: Math.round(lhr.categories.performance.score * 100),
                    accessibility: Math.round(lhr.categories.accessibility.score * 100),
                    'best-practices': Math.round(lhr.categories['best-practices'].score * 100),
                    seo: Math.round(lhr.categories.seo.score * 100)
                  };
                  
                  return `
            **${lhr.finalUrl}**
            - üöÄ Performance: ${scores.performance}
            - ‚ôø Accessibility: ${scores.accessibility}
            - ‚úÖ Best Practices: ${scores['best-practices']}
            - üîç SEO: ${scores.seo}
                  `;
                }).join('\n');
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `
            ## üîç Lighthouse Performance Audit
            
            ${summary}
            
            [View detailed report](${context.payload.repository.html_url}/actions/runs/${context.runId})
                  `
                });
              }
            }
